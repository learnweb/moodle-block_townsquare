{"version":3,"file":"usersettings_reset.min.js","sources":["../src/usersettings_reset.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript to reset the user settings.\n *\n * This file implements 1 functionality:\n * - If the \"reset settings\" button is pressed, reset all settings and delete the users database record.\n *\n * @module     block_townsquare/usersettings_reset\n * @copyright  2024 Tamaro Walter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\n\n// Get the reset button for the user settings.\nconst resetbutton = document.getElementById('ts_usersettings_resetbutton');\n\n/**\n * Init function. This functions resets the user settings from the database.\n * @param {number} userid The id of the current user.\n */\nexport function init(userid) {\n    // First step: delete user settings in database.\n\n    // Add event listener to the reset button.\n    resetbutton.addEventListener('click', async function() {\n        // Set up for AJAX call.\n        const data = {\n            methodname: 'block_townsquare_reset_usersettings',\n            args: {\n                userid: userid,\n            },\n        };\n        // Call the AJAX function.\n        let result = Ajax.call([data]);\n\n        // Make the clicked button green by adding a class and remove it afterward.\n        resetbutton.classList.add('bg-success', 'text-white', 'ts_button_transition');\n        setTimeout(function() {\n            resetbutton.classList.remove('bg-success');\n            resetbutton.classList.remove('text-white');\n        }, 1500);\n\n        // Second step: reset all active filters.\n        const coursecheckboxes = document.querySelectorAll('.ts_course_checkbox');\n        const lettercheckboxes = document.querySelectorAll('.ts_letter_checkbox');\n        const alltimebutton = document.querySelectorAll('.ts_all_time_button');\n\n        coursecheckboxes.forEach(function(checkbox) {\n            if (!checkbox.checked) {\n                checkbox.click();\n            }\n        });\n\n        alltimebutton.forEach(function(button) {\n            button.checked = true;\n            button.parentNode.classList.add('active');\n            button.dispatchEvent(new Event('change'));\n        });\n\n        lettercheckboxes.forEach(function(checkbox) {\n            if (!checkbox.checked) {\n                checkbox.click();\n            }\n        });\n        return result;\n    });\n}\n"],"names":["userid","resetbutton","addEventListener","async","data","methodname","args","result","Ajax","call","classList","add","setTimeout","remove","coursecheckboxes","document","querySelectorAll","lettercheckboxes","alltimebutton","forEach","checkbox","checked","click","button","parentNode","dispatchEvent","Event","getElementById"],"mappings":";;;;;;;;;;oFAmCqBA,QAIjBC,YAAYC,iBAAiB,SAASC,uBAE5BC,KAAO,CACTC,WAAY,sCACZC,KAAM,CACFN,OAAQA,aAIZO,OAASC,cAAKC,KAAK,CAACL,OAGxBH,YAAYS,UAAUC,IAAI,aAAc,aAAc,wBACtDC,YAAW,WACPX,YAAYS,UAAUG,OAAO,cAC7BZ,YAAYS,UAAUG,OAAO,gBAC9B,YAGGC,iBAAmBC,SAASC,iBAAiB,uBAC7CC,iBAAmBF,SAASC,iBAAiB,uBAC7CE,cAAgBH,SAASC,iBAAiB,8BAEhDF,iBAAiBK,SAAQ,SAASC,UACzBA,SAASC,SACVD,SAASE,WAIjBJ,cAAcC,SAAQ,SAASI,QAC3BA,OAAOF,SAAU,EACjBE,OAAOC,WAAWd,UAAUC,IAAI,UAChCY,OAAOE,cAAc,IAAIC,MAAM,cAGnCT,iBAAiBE,SAAQ,SAASC,UACzBA,SAASC,SACVD,SAASE,WAGVf,qEAlDTN,YAAcc,SAASY,eAAe"}