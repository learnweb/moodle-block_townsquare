{"version":3,"file":"timefilter.min.js","sources":["../src/timefilter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for the time filter\n *\n * This file implements 1 functionality:\n * - Checks, which of the radio buttons is pressed and filters the content based on the time.\n *\n * @module     block_townsquare/timefilter\n * @copyright  2024 Tamaro Walter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// Get the relevant radio buttons.\nconst alltimebutton = document.querySelectorAll('.ts_all_time_button');\nconst futureradiobuttons = document.querySelectorAll('.ts_future_time_button');\nconst pastradiobuttons = document.querySelectorAll('.ts_past_time_button');\n\n// Define to change the time span, an additional time span and the current time.\nlet currenttime;\nlet timestart;\nlet timeend;\nlet addstarttime;\nlet addendtime;\n\n/**\n * Init function\n */\nexport function init() {\n    // Set the current time.\n    currenttime = new Date().getTime() / 1000;\n\n    // Add event listeners to the all kinds of buttons.\n    alltimeaddEventListener();\n    futuretimeaddEventListener();\n    pasttimeaddEventListener();\n}\n\n/**\n * Function to execute the filter\n * @param {int} starttime   Start of time span for filtering of the current pressed button\n * @param {int} endtime     End of time span for filtering of the current pressed\n * @param {int} addstarttime Start of time span for filtering of an additional radio button.\n * @param {int} addendtime   End of time span for filtering of an additional radio button.\n * @param {boolean} buttonstate State of the radio button (true or false)\n */\nfunction executefilter(starttime, endtime, addstarttime, addendtime, buttonstate) {\n    // Get all letters.\n    const letters = document.querySelectorAll('.townsquare_letter');\n\n    // Loop through each letter and hide/show based on radiobutton state.\n    letters.forEach(function(letter) {\n\n        // Get the created time stamp of each letter.\n        let lettertime = letter.querySelector('.townsquareletter_date').id;\n\n        // If the radio button is checked and the letter is in the time span, activate it.\n        if ((buttonstate && (lettertime >= starttime && lettertime <= endtime)) ||\n            (lettertime >= addstarttime && lettertime <= addendtime)) {\n            letter.classList.add('ts_timefilter_approved'); // Mark the letter as \"approved\".\n        } else {\n            letter.classList.remove('ts_timefilter_approved'); // Mark the letter as \"not approved\".\n        }\n    });\n}\n\n/**\n * Function to add event listeners to the all_time button.\n */\nfunction alltimeaddEventListener() {\n    alltimebutton.forEach(function(button) {\n        button.addEventListener('change', function() {\n            // Set the time span to show all letters.\n            timestart = currenttime - convertidtotime(button.id);\n            timeend = currenttime + convertidtotime(button.id);\n            addstarttime = 0;\n            addendtime = 0;\n\n            // Disable all other radio buttons that filter more specific times.\n            futureradiobuttons.forEach(function(futureradiobutton) {\n                futureradiobutton.checked = false;\n                futureradiobutton.parentNode.classList.remove(\"active\");\n            });\n            pastradiobuttons.forEach(function(pastradiobutton) {\n                pastradiobutton.checked = false;\n                pastradiobutton.parentNode.classList.remove(\"active\");\n            });\n\n            // Execute the filter function.\n            executefilter(timestart, timeend, addstarttime, addendtime, button.checked);\n        });\n    });\n}\n\n/**\n * Function to add event listeners to the future time radio buttons.\n */\nfunction futuretimeaddEventListener() {\n    futureradiobuttons.forEach(function(button) {\n        button.addEventListener('change', function() {\n            // Disable the all_time button.\n            alltimebutton.forEach(function(alltimebutton) {\n                alltimebutton.checked = false;\n                alltimebutton.parentNode.classList.remove('active');\n            });\n\n            // Set the time span based on the radiobutton id.\n            timestart = currenttime;\n            timeend = currenttime + convertidtotime(button.id);\n\n            // Check if one past time button is checked. If yes, set the additional time span based on its id.\n            addstarttime = 0;\n            addendtime = 0;\n            pastradiobuttons.forEach(function(pastradiobutton) {\n                if (pastradiobutton.checked || pastradiobutton.parentNode.classList.contains('active')) {\n                    addstarttime = currenttime - convertidtotime(pastradiobutton.id);\n                    addendtime = currenttime;\n                }\n            });\n\n            // Execute the filter function.\n            executefilter(timestart, timeend, addstarttime, addendtime, button.checked);\n        });\n    });\n}\n\n/**\n * Function to add event listeners to the past time radio buttons.\n */\nfunction pasttimeaddEventListener() {\n    pastradiobuttons.forEach(function(button) {\n        button.addEventListener('change', function() {\n            // Disable the all_time button.\n            alltimebutton.forEach(function(alltimebutton) {\n                alltimebutton.checked = false;\n            });\n\n            // Set the time span based on the radiobutton id.\n            timestart = currenttime - convertidtotime(button.id);\n            timeend = currenttime;\n\n            // Check if one future time button is checked. If yes, set the additional time span based on its id.\n            addstarttime = 0;\n            addendtime = 0;\n            futureradiobuttons.forEach(function(futureradiobutton) {\n                if (futureradiobutton.checked || futureradiobutton.parentNode.classList.contains('active')) {\n                    addstarttime = currenttime;\n                    addendtime = currenttime + convertidtotime(futureradiobutton.id);\n                }\n            });\n\n            // Execute the filter function.\n            executefilter(timestart, timeend, addstarttime, addendtime, button.checked);\n        });\n    });\n}\n\n/**\n * Function to convert the radio button id to a useable time span.\n * @param {string} id  The id of the radio button\n * @returns {number}\n */\nfunction convertidtotime(id) {\n    switch (id) {\n        case \"ts_time_all\":\n            return 15778463;\n        case \"ts_time_next_twodays\":\n        case \"ts_time_last_twodays\":\n            return 172800;\n        case \"ts_time_next_fivedays\":\n        case \"ts_time_last_fivedays\":\n            return 432000;\n        case \"ts_time_next_week\":\n        case \"ts_time_last_week\":\n            return 604800;\n        case \"ts_time_next_month\":\n        case \"ts_time_last_month\":\n            return 2592000;\n    }\n}\n"],"names":["currenttime","Date","getTime","alltimebutton","forEach","button","addEventListener","timestart","convertidtotime","id","timeend","addstarttime","addendtime","futureradiobuttons","futureradiobutton","checked","parentNode","classList","remove","pastradiobuttons","pastradiobutton","executefilter","contains","document","querySelectorAll","starttime","endtime","buttonstate","letter","lettertime","querySelector","add"],"mappings":"sJA2CIA,aAAc,IAAIC,MAAOC,UAAY,IAwCrCC,cAAcC,SAAQ,SAASC,QAC3BA,OAAOC,iBAAiB,UAAU,WAE9BC,UAAYP,YAAcQ,gBAAgBH,OAAOI,IACjDC,QAAUV,YAAcQ,gBAAgBH,OAAOI,IAC/CE,aAAe,EACfC,WAAa,EAGbC,mBAAmBT,SAAQ,SAASU,mBAChCA,kBAAkBC,SAAU,EAC5BD,kBAAkBE,WAAWC,UAAUC,OAAO,aAElDC,iBAAiBf,SAAQ,SAASgB,iBAC9BA,gBAAgBL,SAAU,EAC1BK,gBAAgBJ,WAAWC,UAAUC,OAAO,aAIhDG,cAAcd,UAAWG,QAASC,aAAcC,WAAYP,OAAOU,eAS3EF,mBAAmBT,SAAQ,SAASC,QAChCA,OAAOC,iBAAiB,UAAU,WAE9BH,cAAcC,SAAQ,SAASD,eAC3BA,cAAcY,SAAU,EACxBZ,cAAca,WAAWC,UAAUC,OAAO,aAI9CX,UAAYP,YACZU,QAAUV,YAAcQ,gBAAgBH,OAAOI,IAG/CE,aAAe,EACfC,WAAa,EACbO,iBAAiBf,SAAQ,SAASgB,kBAC1BA,gBAAgBL,SAAWK,gBAAgBJ,WAAWC,UAAUK,SAAS,aACzEX,aAAeX,YAAcQ,gBAAgBY,gBAAgBX,IAC7DG,WAAaZ,gBAKrBqB,cAAcd,UAAWG,QAASC,aAAcC,WAAYP,OAAOU,eAS3EI,iBAAiBf,SAAQ,SAASC,QAC9BA,OAAOC,iBAAiB,UAAU,WAE9BH,cAAcC,SAAQ,SAASD,eAC3BA,cAAcY,SAAU,KAI5BR,UAAYP,YAAcQ,gBAAgBH,OAAOI,IACjDC,QAAUV,YAGVW,aAAe,EACfC,WAAa,EACbC,mBAAmBT,SAAQ,SAASU,oBAC5BA,kBAAkBC,SAAWD,kBAAkBE,WAAWC,UAAUK,SAAS,aAC7EX,aAAeX,YACfY,WAAaZ,YAAcQ,gBAAgBM,kBAAkBL,QAKrEY,cAAcd,UAAWG,QAASC,aAAcC,WAAYP,OAAOU;;;;;;;;;;;MA1IzEZ,cAAgBoB,SAASC,iBAAiB,uBAC1CX,mBAAqBU,SAASC,iBAAiB,0BAC/CL,iBAAmBI,SAASC,iBAAiB,4BAG/CxB,YACAO,UACAG,QACAC,aACAC,oBAuBKS,cAAcI,UAAWC,QAASf,aAAcC,WAAYe,aAEjDJ,SAASC,iBAAiB,sBAGlCpB,SAAQ,SAASwB,YAGjBC,WAAaD,OAAOE,cAAc,0BAA0BrB,GAG3DkB,aAAgBE,YAAcJ,WAAaI,YAAcH,SACzDG,YAAclB,cAAgBkB,YAAcjB,WAC7CgB,OAAOX,UAAUc,IAAI,0BAErBH,OAAOX,UAAUC,OAAO,sCAqG3BV,gBAAgBC,WACbA,QACC,qBACM,aACN,2BACA,8BACM,WACN,4BACA,+BACM,UACN,wBACA,2BACM,WACN,yBACA,4BACM"}