{"version":3,"file":"usersettings_save.min.js","sources":["../src/usersettings_save.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to save the user settings in the database.\n *\n * This file implements 1 functionality:\n * - If the \"save settings\" button is pressed, store the settings in the database.\n *\n * @module     block_townsquare/usersettings_save\n * @copyright  2024 Tamaro Walter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\n\n// Get the save button for the user settings.\nconst savebutton = document.getElementById('ts_usersettings_savebutton');\n\n// Get the buttons from the time filter.\nconst alltimebutton = document.querySelectorAll('.ts_all_time_button');\nconst futureradiobuttons = document.querySelectorAll('.ts_future_time_button');\nconst pastradiobuttons = document.querySelectorAll('.ts_past_time_button');\n\n// Get the checkboxes from the letter filter.\nconst checkboxes = document.querySelectorAll('.ts_letter_checkbox');\n\n/**\n * Init function\n *\n * @param {number} userid           The id of the current user.\n * @param {object} settingsfromdb   The settings from the database, if there are any.\n */\nexport function init(userid, settingsfromdb) {\n    // When the page is loaded, set the settings from the database.\n    if (settingsfromdb) {\n        executeusersettings(settingsfromdb);\n    }\n\n    // Add event listener to the save button.\n    savebutton.addEventListener('click', async function() {\n\n        // First step: collect the current settings.\n        // Get the relevant time spans of the time filter and the setting of the letter filter checkboxes.\n        let timespans = collecttimefiltersettings();\n        let letterfilter = collectletterfiltersettings();\n\n        // Second step: store the usersettings in the database.\n        await saveusersettings(userid, timespans['timepast'], timespans['timefuture'], letterfilter['basicletter'],\n            letterfilter['completionletter'], letterfilter['postletter']);\n    });\n}\n\n/**\n * Function to save the user settings in the database.\n * @param {number} userid\n * @param {number} timefilterpast\n * @param {number} timefilterfuture\n * @param {number} basicletter\n * @param {number} completionletter\n * @param {number} postletter\n * @returns {Promise<*>}\n */\nfunction saveusersettings(userid, timefilterpast, timefilterfuture, basicletter, completionletter, postletter) {\n    let result;\n\n    const data = {\n        methodname: 'block_townsquare_record_usersettings',\n        args: {\n            userid: userid,\n            timefilterpast: timefilterpast,\n            timefilterfuture: timefilterfuture,\n            basicletter: basicletter,\n            completionletter: completionletter,\n            postletter: postletter,\n        },\n    };\n    result = Ajax.call([data]);\n\n    // Make the clicked button green by adding a class and remove it afterward.\n    savebutton.classList.add('bg-success', 'text-white', 'ts_button_transition');\n    setTimeout(function() {\n        savebutton.classList.remove('bg-success');\n        savebutton.classList.remove('text-white');\n    }, 1500);\n\n    return result;\n\n}\n\n/**\n * Function to execute existing user settings when loading the townsquare.\n * @param {Object} settingsfromdb\n */\nfunction executeusersettings(settingsfromdb) {\n\n    // First step: set the time filter settings.\n    // Change the time into the correct radio button id.\n    let futurebuttonid = converttimetoid(settingsfromdb.timefilterfuture, true);\n    let pastbuttonid = converttimetoid(settingsfromdb.timefilterpast, false);\n\n    // If the time span is a combination of past and future, go through the two radio buttons and activate the filter.\n    if (futurebuttonid !== \"ts_time_all\") {\n        alltimebutton.forEach(function(alltimebutton) {\n            alltimebutton.checked = false;\n        });\n        futureradiobuttons.forEach(function(button) {\n            if (button.id === futurebuttonid) {\n                button.checked = true;\n                button.dispatchEvent(new Event('change'));\n            }\n        });\n        pastradiobuttons.forEach(function(button) {\n            if (button.id === pastbuttonid) {\n                button.checked = true;\n                button.dispatchEvent(new Event('change'));\n            }\n        });\n    } else {\n        // If the time span is set to all time, activate the all time button.\n        alltimebutton.forEach(function(button) {\n            button.checked = true;\n            button.dispatchEvent(new Event('change'));\n        });\n        futureradiobuttons.forEach(function(button) {\n            button.checked = false;\n        });\n        pastradiobuttons.forEach(function(button) {\n            button.checked = false;\n        });\n    }\n\n    // Second step: set the letter filter settings.\n    // Per default all checkboxes are checked. If the setting is 0, uncheck the checkbox.\n    checkboxes.forEach(function(checkbox) {\n        let basiclettercheck = checkbox.id === 'basicletter' && settingsfromdb.basicletter === \"0\";\n        let completionlettercheck = checkbox.id === 'completionletter' && settingsfromdb.completionletter === \"0\";\n        let postlettercheck = checkbox.id === 'postletter' && settingsfromdb.postletter === \"0\";\n\n        if (basiclettercheck || completionlettercheck || postlettercheck) {\n            checkbox.click();\n        }\n    });\n}\n\n/**\n * Function to collect the letter filter settings.\n * @returns {{basicletter: number, completionletter: number, postletter: number}}\n */\nfunction collectletterfiltersettings() {\n    let settings = {'basicletter': 0, 'completionletter': 0, 'postletter': 0 };\n\n    checkboxes.forEach(function(checkbox) {\n        if (checkbox.checked) {\n            switch(checkbox.id) {\n                case \"basicletter\":\n                    settings.basicletter = 1;\n                    break;\n                case \"completionletter\":\n                    settings.completionletter = 1;\n                    break;\n                case \"postletter\":\n                    settings.postletter = 1;\n                    break;\n\n            }\n        }\n    });\n    // Calculate the setting number. It is a number between 0 and 7, and each letter represents a bit.\n    return settings;\n}\n\n/**\n * Function to collect the time filter settings.\n * @returns {{timepast: number, timefuture: number}}\n */\nfunction collecttimefiltersettings() {\n    let settings = {timepast: 0, timefuture: 0};\n    let settingsset = false;\n\n    // Get the relevant time spans of the time filter.\n    // Check if the alltimebutton is set.\n    alltimebutton.forEach(function(button) {\n        if (button.checked) {\n            // Get the timespan.\n            settings.timepast = convertidtotime(button.id);\n            settings.timefuture = convertidtotime(button.id);\n            settingsset = true;\n        }\n    });\n\n    if (settingsset) {\n        return settings;\n    }\n\n    // If the alltimebutton is not set, check which of the future/past buttons is set.\n    futureradiobuttons.forEach(function(button) {\n        if (button.checked) {\n            // Get the timespan.\n            settings.timefuture = convertidtotime(button.id);\n        }\n    });\n\n    pastradiobuttons.forEach(function(button) {\n        if (button.checked) {\n            // Get the timespan.\n            settings.timepast = convertidtotime(button.id);\n        }\n    });\n    return settings;\n}\n\n\n/**\n * Function to convert the radio button id to a useable time span.\n * @param {string} id  The id of the radio button\n * @returns {number}\n */\nfunction convertidtotime(id) {\n    // TODO: Please use global functions if possible.\n    switch (id) {\n        case \"ts_time_all\":\n            return 15778463;\n        case \"ts_time_next_twodays\":\n        case \"ts_time_last_twodays\":\n            return 172800;\n        case \"ts_time_next_fivedays\":\n        case \"ts_time_last_fivedays\":\n            return 432000;\n        case \"ts_time_next_week\":\n        case \"ts_time_last_week\":\n            return 604800;\n        case \"ts_time_next_month\":\n        case \"ts_time_last_month\":\n            return 2592000;\n    }\n}\n\n/**\n * Function to convert the time span to a radio button id.\n * @param {string} time\n * @param {boolean} future\n * @returns {string}\n */\nfunction converttimetoid(time, future) {\n    switch (time) {\n        case \"15778463\":\n            return \"ts_time_all\";\n        case \"172800\":\n            if (future) {\n                return \"ts_time_next_twodays\";\n            }\n            return \"ts_time_past_twodays\";\n        case \"432000\":\n            if (future) {\n                return \"ts_time_next_fivedays\";\n            }\n            return \"ts_time_last_fivedays\";\n        case \"604800\":\n            if (future) {\n                return \"ts_time_next_week\";\n            }\n            return \"ts_time_last_week\";\n        case \"2592000\":\n            if (future) {\n                return \"ts_time_next_month\";\n\n            }\n            return \"ts_time_last_month\";\n    }\n}\n"],"names":["userid","settingsfromdb","futurebuttonid","converttimetoid","timefilterfuture","pastbuttonid","timefilterpast","alltimebutton","forEach","checked","futureradiobuttons","button","id","dispatchEvent","Event","pastradiobuttons","checkboxes","checkbox","basiclettercheck","basicletter","completionlettercheck","completionletter","postlettercheck","postletter","click","executeusersettings","savebutton","addEventListener","async","timespans","settings","timepast","timefuture","settingsset","convertidtotime","collecttimefiltersettings","letterfilter","collectletterfiltersettings","result","data","methodname","args","Ajax","call","classList","add","setTimeout","remove","saveusersettings","document","getElementById","querySelectorAll","time","future"],"mappings":"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"}